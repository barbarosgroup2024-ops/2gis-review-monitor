const axios = require('axios');

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(botToken, chatId, message) {
  try {
    if (!botToken || !chatId) {
      console.log('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏');
      return { success: false, error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
    }

    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

    const response = await axios.post(url, {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    }, {
      timeout: 10000
    });

    if (response.data.ok) {
      return { success: true };
    } else {
      return { success: false, error: response.data.description };
    }
  } catch (error) {
    console.error('Error sending Telegram message:', error.message);
    return { 
      success: false, 
      error: error.response?.data?.description || error.message 
    };
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –¥–ª—è Telegram
function formatReviewMessage(review, companyName) {
  const stars = '‚≠ê'.repeat(review.rating);
  
  return `
üè¢ <b>${companyName}</b>

üìÖ –î–∞—Ç–∞: ${formatDateRu(review.date)}
üë§ –ò–º—è: ${review.userName}
üìç –ê–¥—Ä–µ—Å: ${review.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
${stars} –†–µ–π—Ç–∏–Ω–≥: ${review.rating}/5

üìù <b>–û—Ç–∑—ã–≤:</b>
${review.text || '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}
  `.trim();
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
function formatDateRu(dateStr) {
  if (!dateStr) return '';
  
  const date = new Date(dateStr);
  const days = ['–≤—Å', '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±'];
  const months = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
  
  return `${days[date.getDay()]} ${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞
async function testBot(botToken, chatId) {
  try {
    const testMessage = '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ 2GIS';
    const result = await sendMessage(botToken, chatId, testMessage);
    return result;
  } catch (error) {
    return { success: false, error: error.message };
  }
}

module.exports = {
  sendMessage,
  formatReviewMessage,
  testBot
};