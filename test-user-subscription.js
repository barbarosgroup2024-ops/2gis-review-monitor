/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥–ø–∏—Å–∫–∏
 * –ó–∞–ø—É—Å–∫: node test-user-subscription.js <email>
 */

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û–®–ò–ë–ö–ê: SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

const email = process.argv[2];

if (!email) {
  console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-user-subscription.js <email>');
  process.exit(1);
}

async function checkUserAndSubscription() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', email);
    
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', email)
      .single();

    if (userError) {
      if (userError.code === 'PGRST116') {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('\nüí° –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:3000/register');
        return false;
      }
      throw userError;
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log('   ID:', user.id);
    console.log('   Email:', user.email);
    console.log('   –ò–º—è:', user.name);
    console.log('   –°—Ç–∞—Ç—É—Å:', user.status);
    console.log('   –°–æ–∑–¥–∞–Ω:', user.created_at);

    // –ù–∞–π—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É
    console.log('\nüîç –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏...');
    const { data: subscription, error: subError } = await supabase
      .from('subscriptions')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (subError) {
      if (subError.code === 'PGRST116') {
        console.error('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        console.log('\nüí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:');
        console.log('   1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É: http://localhost:3000/login');
        console.log('   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–ø–∏—Å–∫–∞"');
        console.log('   3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ');
        return false;
      }
      throw subError;
    }

    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:');
    console.log('   ID:', subscription.id);
    console.log('   –¢–∞—Ä–∏—Ñ:', subscription.plan);
    console.log('   –°—Ç–∞—Ç—É—Å:', subscription.status);
    console.log('   –ù–∞—á–∞–ª–æ:', subscription.start_date);
    console.log('   –û–∫–æ–Ω—á–∞–Ω–∏–µ:', subscription.end_date);

    if (subscription.status !== 'active') {
      console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!');
      console.log('   –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π...');
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('*')
      .eq('user_id', user.id);

    if (companiesError) throw companiesError;

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: ${companies.length}`);
    
    const maxCompanies = subscription.plan === 'trial' ? 1 : subscription.plan === 'basic' ? 3 : 10;
    console.log(`   –õ–∏–º–∏—Ç –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ "${subscription.plan}": ${maxCompanies}`);
    
    if (companies.length >= maxCompanies) {
      console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–º–ø–∞–Ω–∏–π!');
      console.log('   –£–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ');
      return false;
    }

    if (companies.length > 0) {
      console.log('\nüìã –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π:');
      companies.forEach((company, index) => {
        console.log(`   ${index + 1}. ${company.company_name} (${company.active ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'})`);
      });
    }

    console.log('\n‚úÖ –í–°–Å –ì–û–¢–û–í–û!');
    console.log('üéâ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏!');
    
    return true;
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
    return false;
  }
}

checkUserAndSubscription().then(success => {
  process.exit(success ? 0 : 1);
});