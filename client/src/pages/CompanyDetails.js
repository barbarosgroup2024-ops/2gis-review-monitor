import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  getCompany, 
  updateCompany, 
  createCompany, 
  testConnection,
  getReviews,
  getStats,
  refreshReviews
} from '../services/api';

function CompanyDetails() {
  const { id } = useParams();
  const navigate = useNavigate();
  const isNew = id === 'new';

  const [company, setCompany] = useState({
    companyName: '',
    twoGisApiUrl: '',
    twoGisProfileUrl: '',
    telegramBotToken: '',
    telegramChatId: '',
    checkIntervalMinutes: 5,
    minRatingFilter: null,
    maxRatingFilter: null,
    active: true
  });
  const [reviews, setReviews] = useState([]);
  const [stats, setStats] = useState(null);
  const [period, setPeriod] = useState('today');
  const [loading, setLoading] = useState(!isNew);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  useEffect(() => {
    if (!isNew) {
      loadCompanyData();
    }
  }, [id, isNew]);

  useEffect(() => {
    if (!isNew) {
      loadReviews();
    }
  }, [period, isNew]);

  const loadCompanyData = async () => {
    try {
      const [companyData, statsData] = await Promise.all([
        getCompany(id),
        getStats(id)
      ]);
      
      setCompany(companyData);
      setStats(statsData);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  const loadReviews = async () => {
    try {
      const data = await getReviews(id, period);
      setReviews(data);
    } catch (error) {
      console.error('Error loading reviews:', error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    setSaving(true);

    try {
      if (isNew) {
        const newCompany = await createCompany(company);
        setSuccess('–ö–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
        setTimeout(() => navigate(`/companies/${newCompany.id}`), 1500);
      } else {
        await updateCompany(id, company);
        setSuccess('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      }
    } catch (err) {
      setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    } finally {
      setSaving(false);
    }
  };

  const handleTestConnection = async () => {
    setError('');
    setSuccess('');

    try {
      const result = await testConnection(id);
      if (result.success) {
        setSuccess(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${result.reviewsCount}`);
      } else {
        setError(`‚ùå ${result.error}`);
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    }
  };

  const handleRefresh = async () => {
    try {
      const result = await refreshReviews(id);
      setSuccess(`–û–±–Ω–æ–≤–ª–µ–Ω–æ! –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: ${result.newReviews}`);
      loadReviews();
      loadCompanyData();
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤');
    }
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="container">
      <h2 style={{ marginBottom: '30px' }}>
        {isNew ? '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é' : company.companyName}
      </h2>

      <div className="card">
        <h3 style={{ marginBottom: '20px' }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏</h3>
        
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ *</label>
            <input
              type="text"
              value={company.companyName}
              onChange={(e) => setCompany({ ...company, companyName: e.target.value })}
              required
              disabled={saving}
            />
          </div>

          <div className="form-group">
            <label>URL API 2GIS *</label>
            <input
              type="url"
              value={company.twoGisApiUrl}
              onChange={(e) => setCompany({ ...company, twoGisApiUrl: e.target.value })}
              required
              disabled={saving}
              placeholder="https://public-api.reviews.2gis.com/3.0/orgs/..."
            />
            <small style={{ color: '#999' }}>
              –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ API –∏–∑ –ø–∞–Ω–µ–ª–∏ 2GIS
            </small>
          </div>

          {/* –°–µ–∫—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ Telegram –±–æ—Ç–∞ */}
          {!isNew && company.telegramActivationCode && (
            <div style={{ 
              background: company.telegramActivated ? '#d4edda' : '#fff3cd', 
              border: `1px solid ${company.telegramActivated ? '#c3e6cb' : '#ffeaa7'}`,
              borderRadius: '8px',
              padding: '20px',
              marginBottom: '20px'
            }}>
              <h4 style={{ marginBottom: '15px', color: company.telegramActivated ? '#155724' : '#856404' }}>
                {company.telegramActivated ? '‚úÖ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : 'üì± –ê–∫—Ç–∏–≤–∞—Ü–∏—è Telegram –±–æ—Ç–∞'}
              </h4>
              
              {company.telegramActivated ? (
                <div>
                  <p style={{ marginBottom: '10px' }}>
                    <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> @{company.telegramUsername || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                  </p>
                  <p style={{ marginBottom: '10px' }}>
                    <strong>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:</strong> {new Date(company.telegramActivatedAt).toLocaleString('ru-RU')}
                  </p>
                  <p style={{ marginBottom: '10px' }}>
                    <strong>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</strong> {company.telegramNotificationsEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}
                  </p>
                  <p style={{ fontSize: '14px', color: '#666', marginTop: '15px' }}>
                    üí° –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram: <a href="https://t.me/videokgdas_bot" target="_blank" rel="noopener noreferrer">@videokgdas_bot</a>
                  </p>
                </div>
              ) : (
                <div>
                  <p style={{ marginBottom: '15px' }}>
                    –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:
                  </p>
                  <div style={{ 
                    background: '#fff', 
                    padding: '15px', 
                    borderRadius: '5px',
                    fontFamily: 'monospace',
                    fontSize: '16px',
                    marginBottom: '15px',
                    border: '1px solid #ddd'
                  }}>
                    /start {company.telegramActivationCode}
                  </div>
                  <a 
                    href={`https://t.me/videokgdas_bot?start=${company.telegramActivationCode}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="btn btn-primary"
                    style={{ display: 'inline-block' }}
                  >
                    üöÄ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                  </a>
                </div>
              )}
            </div>
          )}

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ */}
          {!isNew && (
            <div style={{ marginBottom: '20px' }}>
              <h4 style={{ marginBottom: '15px' }}>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤</h4>
              
              <div className="form-group">
                <label>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–∏–Ω—É—Ç—ã)</label>
                <input
                  type="number"
                  min="1"
                  max="1440"
                  value={company.checkIntervalMinutes || 5}
                  onChange={(e) => setCompany({ ...company, checkIntervalMinutes: parseInt(e.target.value) })}
                  disabled={saving}
                />
                <small style={{ color: '#999' }}>
                  –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5 –º–∏–Ω—É—Ç)
                </small>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>
                <div className="form-group">
                  <label>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥</label>
                  <select
                    value={company.minRatingFilter || ''}
                    onChange={(e) => setCompany({ ...company, minRatingFilter: e.target.value ? parseInt(e.target.value) : null })}
                    disabled={saving}
                  >
                    <option value="">–í—Å–µ –æ—Ç–∑—ã–≤—ã</option>
                    <option value="1">‚≠ê 1 –∑–≤–µ–∑–¥–∞</option>
                    <option value="2">‚≠ê‚≠ê 2 –∑–≤–µ–∑–¥—ã</option>
                    <option value="3">‚≠ê‚≠ê‚≠ê 3 –∑–≤–µ–∑–¥—ã</option>
                    <option value="4">‚≠ê‚≠ê‚≠ê‚≠ê 4 –∑–≤–µ–∑–¥—ã</option>
                    <option value="5">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5 –∑–≤–µ–∑–¥</option>
                  </select>
                </div>

                <div className="form-group">
                  <label>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥</label>
                  <select
                    value={company.maxRatingFilter || ''}
                    onChange={(e) => setCompany({ ...company, maxRatingFilter: e.target.value ? parseInt(e.target.value) : null })}
                    disabled={saving}
                  >
                    <option value="">–í—Å–µ –æ—Ç–∑—ã–≤—ã</option>
                    <option value="1">‚≠ê 1 –∑–≤–µ–∑–¥–∞</option>
                    <option value="2">‚≠ê‚≠ê 2 –∑–≤–µ–∑–¥—ã</option>
                    <option value="3">‚≠ê‚≠ê‚≠ê 3 –∑–≤–µ–∑–¥—ã</option>
                    <option value="4">‚≠ê‚≠ê‚≠ê‚≠ê 4 –∑–≤–µ–∑–¥—ã</option>
                    <option value="5">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5 –∑–≤–µ–∑–¥</option>
                  </select>
                </div>
              </div>

              <small style={{ color: '#999', display: 'block', marginTop: '10px' }}>
                üí° –ù–∞–ø—Ä–∏–º–µ—Ä: –º–∏–Ω=1, –º–∞–∫—Å=2 ‚Üí —Ç–æ–ª—å–∫–æ –ø–ª–æ—Ö–∏–µ –æ—Ç–∑—ã–≤—ã (1-2 –∑–≤–µ–∑–¥—ã)
              </small>
            </div>
          )}

          {/* –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) */}
          <details style={{ marginBottom: '20px' }}>
            <summary style={{ cursor: 'pointer', color: '#666', marginBottom: '10px' }}>
              üìã –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –±–æ—Ç—ã)
            </summary>
            
            <div className="form-group">
              <label>Telegram Bot Token</label>
              <input
                type="text"
                value={company.telegramBotToken || ''}
                onChange={(e) => setCompany({ ...company, telegramBotToken: e.target.value })}
                disabled={saving}
                placeholder="123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
              />
              <small style={{ color: '#999' }}>
                –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram
              </small>
            </div>

            <div className="form-group">
              <label>Telegram Chat ID</label>
              <input
                type="text"
                value={company.telegramChatId || ''}
                onChange={(e) => setCompany({ ...company, telegramChatId: e.target.value })}
                disabled={saving}
                placeholder="123456789"
              />
              <small style={{ color: '#999' }}>
                –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π Chat ID —É @userinfobot
              </small>
            </div>
          </details>

          <div className="form-group">
            <label>
              <input
                type="checkbox"
                checked={company.active}
                onChange={(e) => setCompany({ ...company, active: e.target.checked })}
                disabled={saving}
                style={{ marginRight: '10px' }}
              />
              –ê–∫—Ç–∏–≤–Ω–∞ (–ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ—Ç–∑—ã–≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            </label>
          </div>

          {error && <div className="error">{error}</div>}
          {success && <div className="success">{success}</div>}

          <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>
            <button type="submit" className="btn btn-primary" disabled={saving}>
              {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
            </button>
            
            {!isNew && (
              <button 
                type="button" 
                onClick={handleTestConnection}
                className="btn btn-secondary"
              >
                –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
              </button>
            )}
            
            <button 
              type="button" 
              onClick={() => navigate('/companies')}
              className="btn"
              style={{ background: '#999', color: 'white' }}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </form>
      </div>

      {!isNew && stats && (
        <>
          <div className="card">
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤</h3>
              <button onClick={handleRefresh} className="btn btn-secondary">
                üîÑ –û–±–Ω–æ–≤–∏—Ç—å
              </button>
            </div>
            
            <div className="stats-grid">
              <div className="stat-card">
                <h3>–í—Å–µ–≥–æ</h3>
                <div className="value">{stats.total}</div>
              </div>
              <div className="stat-card">
                <h3>–°–µ–≥–æ–¥–Ω—è</h3>
                <div className="value">{stats.today}</div>
              </div>
              <div className="stat-card">
                <h3>–í—á–µ—Ä–∞</h3>
                <div className="value">{stats.yesterday}</div>
              </div>
              <div className="stat-card">
                <h3>–ó–∞ –Ω–µ–¥–µ–ª—é</h3>
                <div className="value">{stats.week}</div>
              </div>
              <div className="stat-card">
                <h3>–ó–∞ –º–µ—Å—è—Ü</h3>
                <div className="value">{stats.month}</div>
              </div>
              <div className="stat-card">
                <h3>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</h3>
                <div className="value">{stats.avgRating}</div>
              </div>
            </div>
          </div>

          <div className="card">
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h3>–û—Ç–∑—ã–≤—ã</h3>
              <select 
                value={period} 
                onChange={(e) => setPeriod(e.target.value)}
                style={{ padding: '8px', borderRadius: '5px', border: '1px solid #ddd' }}
              >
                <option value="today">–°–µ–≥–æ–¥–Ω—è</option>
                <option value="yesterday">–í—á–µ—Ä–∞</option>
                <option value="week">–ù–µ–¥–µ–ª—è</option>
                <option value="month">–ú–µ—Å—è—Ü</option>
                <option value="all">–í—Å–µ</option>
              </select>
            </div>

            {reviews.length === 0 ? (
              <p style={{ textAlign: 'center', color: '#999', padding: '40px' }}>
                –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
              </p>
            ) : (
              reviews.map((review, index) => (
                <div key={index} className="review-item">
                  <div className="review-header">
                    <div className="review-user">{review.userName}</div>
                    <div className="review-date">{review.date}</div>
                  </div>
                  <div className="review-rating">
                    {'‚≠ê'.repeat(review.rating)}
                  </div>
                  {review.address && (
                    <div style={{ fontSize: '14px', color: '#999', marginBottom: '10px' }}>
                      üìç {review.address}
                    </div>
                  )}
                  <div className="review-text">{review.text}</div>
                </div>
              ))
            )}
          </div>
        </>
      )}
    </div>
  );
}

export default CompanyDetails;