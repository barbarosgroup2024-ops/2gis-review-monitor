/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
 * –ó–∞–ø—É—Å–∫: node create-test-user.js
 */

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const bcrypt = require('bcryptjs');
const { v4: uuidv4 } = require('uuid');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û–®–ò–ë–ö–ê: SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function createTestUser() {
  try {
    const email = 'test@example.com';
    const password = 'test123456';
    const name = '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const { data: existingUser } = await supabase
      .from('users')
      .select('*')
      .eq('email', email)
      .single();

    if (existingUser) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', email);
      console.log('   ID:', existingUser.id);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
      const { data: subscription } = await supabase
        .from('subscriptions')
        .select('*')
        .eq('user_id', existingUser.id)
        .single();

      if (subscription) {
        console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        console.log('   –¢–∞—Ä–∏—Ñ:', subscription.plan);
        console.log('   –°—Ç–∞—Ç—É—Å:', subscription.status);
      } else {
        console.log('‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º...');
        await createSubscription(existingUser.id);
      }

      console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!');
      console.log('üìß Email:', email);
      console.log('üîë –ü–∞—Ä–æ–ª—å:', password);
      console.log('üåê –í–æ–π—Ç–∏: http://localhost:3000/login');
      return;
    }

    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –•–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 10);
    const userId = uuidv4();

    // –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .insert([{
        id: userId,
        email: email,
        password: hashedPassword,
        name: name,
        status: 'active'
      }])
      .select()
      .single();

    if (userError) throw userError;

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', email);
    console.log('   ID:', user.id);

    // –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    await createSubscription(user.id);

    console.log('\n‚úÖ –¢–ï–°–¢–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–û–ó–î–ê–ù!');
    console.log('‚ïê'.repeat(60));
    console.log('üìß Email:', email);
    console.log('üîë –ü–∞—Ä–æ–ª—å:', password);
    console.log('üë§ –ò–º—è:', name);
    console.log('‚ïê'.repeat(60));
    console.log('\nüåê –í–æ–π—Ç–∏: http://localhost:3000/login');
    console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
    process.exit(1);
  }
}

async function createSubscription(userId) {
  console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...');
  
  const startDate = new Date();
  const endDate = new Date();
  endDate.setDate(endDate.getDate() + 30); // 30 –¥–Ω–µ–π

  const { data: subscription, error: subError } = await supabase
    .from('subscriptions')
    .insert([{
      id: uuidv4(),
      user_id: userId,
      plan: 'trial',
      status: 'active',
      start_date: startDate.toISOString(),
      end_date: endDate.toISOString()
    }])
    .select()
    .single();

  if (subError) throw subError;

  console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
  console.log('   –¢–∞—Ä–∏—Ñ: trial (1 –∫–æ–º–ø–∞–Ω–∏—è)');
  console.log('   –°—Ç–∞—Ç—É—Å: active');
  console.log('   –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:', endDate.toLocaleDateString('ru-RU'));
}

createTestUser();